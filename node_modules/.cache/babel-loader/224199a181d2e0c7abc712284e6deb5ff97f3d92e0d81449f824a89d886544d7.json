{"ast":null,"code":"var _jsxFileName = \"/home/tania/react/Clase/formulariopiel/src/componentes/preguntas.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Card, CardTitle, Col, Row } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pregunta(props) {\n  _s();\n  // Usar un estado para controlar el color de cada botón en cada tarjeta\n  const [colores, setColores] = useState(() => {\n    // Inicializar el estado con el color por defecto para cada botón en cada tarjeta\n    const initialColors = {};\n    props.preguns.forEach((pregunta, index) => {\n      initialColors[index] = pregunta.respuestas.map(() => props.color[0]);\n    });\n    return initialColors;\n  });\n  const handleClick = (cardIndex, buttonIndex, valor) => {\n    // Crear una copia del objeto de colores\n    const newColores = {\n      ...colores\n    };\n    // Cambiar el color del botón presionado en la tarjeta específica\n    newColores[cardIndex][buttonIndex] = props.color[1];\n    // Actualizar el estado de los colores\n    setColores(newColores);\n    // Sumar el valor del botón al contador\n    props.contar(valor);\n  };\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      sm: \"6\",\n      children: props.preguns.map((pregunta, cardIndex) => /*#__PURE__*/_jsxDEV(Card, {\n        body: true,\n        className: \"my-2\",\n        style: {\n          width: '30rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          tag: \"h5\",\n          children: pregunta.texto\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 25\n        }, this), pregunta.respuestas.map((respuesta, buttonIndex) => /*#__PURE__*/_jsxDEV(Button, {\n          color: colores[cardIndex][buttonIndex] // Usar el color correspondiente desde el estado\n          ,\n          outline: true,\n          onClick: () => handleClick(cardIndex, buttonIndex, respuesta.valor),\n          children: respuesta.respuesta\n        }, buttonIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 29\n        }, this))]\n      }, cardIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n_s(Pregunta, \"WkbESrHcKGHJlbGd2UfFG8x6xLc=\");\n_c = Pregunta;\nvar _c;\n$RefreshReg$(_c, \"Pregunta\");","map":{"version":3,"names":["React","useState","Button","Card","CardTitle","Col","Row","jsxDEV","_jsxDEV","Pregunta","props","_s","colores","setColores","initialColors","preguns","forEach","pregunta","index","respuestas","map","color","handleClick","cardIndex","buttonIndex","valor","newColores","contar","children","sm","body","className","style","width","tag","texto","fileName","_jsxFileName","lineNumber","columnNumber","respuesta","outline","onClick","_c","$RefreshReg$"],"sources":["/home/tania/react/Clase/formulariopiel/src/componentes/preguntas.js"],"sourcesContent":["import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Card, CardTitle, Col, Row } from 'reactstrap';\n\nexport default function Pregunta(props) {\n    // Usar un estado para controlar el color de cada botón en cada tarjeta\n    const [colores, setColores] = useState(() => {\n        // Inicializar el estado con el color por defecto para cada botón en cada tarjeta\n        const initialColors = {};\n        props.preguns.forEach((pregunta, index) => {\n            initialColors[index] = pregunta.respuestas.map(() => props.color[0]);\n        });\n        return initialColors;\n    });\n\n    const handleClick = (cardIndex, buttonIndex, valor) => {\n        // Crear una copia del objeto de colores\n        const newColores = { ...colores };\n        // Cambiar el color del botón presionado en la tarjeta específica\n        newColores[cardIndex][buttonIndex] = props.color[1];\n        // Actualizar el estado de los colores\n        setColores(newColores);\n        // Sumar el valor del botón al contador\n        props.contar(valor);\n    };\n\n    return (\n        <Row>\n            <Col sm=\"6\">\n                {props.preguns.map((pregunta, cardIndex) => (\n                    <Card\n                        key={cardIndex}\n                        body\n                        className=\"my-2\"\n                        style={{ width: '30rem' }}\n                    >\n                        <CardTitle tag=\"h5\">{pregunta.texto}</CardTitle>\n                        {pregunta.respuestas.map((respuesta, buttonIndex) => (\n                            <Button\n                                key={buttonIndex}\n                                color={colores[cardIndex][buttonIndex]} // Usar el color correspondiente desde el estado\n                                outline\n                                onClick={() => handleClick(cardIndex, buttonIndex, respuesta.valor)}\n                            >\n                                {respuesta.respuesta}\n                            </Button>\n                        ))}\n                    </Card>\n                ))}\n            </Col>\n        </Row>\n    );\n}\n\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,sCAAsC;AAC7C,SAASC,MAAM,EAAEC,IAAI,EAAEC,SAAS,EAAEC,GAAG,EAAEC,GAAG,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,eAAe,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACpC;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,MAAM;IACzC;IACA,MAAMa,aAAa,GAAG,CAAC,CAAC;IACxBJ,KAAK,CAACK,OAAO,CAACC,OAAO,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;MACvCJ,aAAa,CAACI,KAAK,CAAC,GAAGD,QAAQ,CAACE,UAAU,CAACC,GAAG,CAAC,MAAMV,KAAK,CAACW,KAAK,CAAC,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC;IACF,OAAOP,aAAa;EACxB,CAAC,CAAC;EAEF,MAAMQ,WAAW,GAAGA,CAACC,SAAS,EAAEC,WAAW,EAAEC,KAAK,KAAK;IACnD;IACA,MAAMC,UAAU,GAAG;MAAE,GAAGd;IAAQ,CAAC;IACjC;IACAc,UAAU,CAACH,SAAS,CAAC,CAACC,WAAW,CAAC,GAAGd,KAAK,CAACW,KAAK,CAAC,CAAC,CAAC;IACnD;IACAR,UAAU,CAACa,UAAU,CAAC;IACtB;IACAhB,KAAK,CAACiB,MAAM,CAACF,KAAK,CAAC;EACvB,CAAC;EAED,oBACIjB,OAAA,CAACF,GAAG;IAAAsB,QAAA,eACApB,OAAA,CAACH,GAAG;MAACwB,EAAE,EAAC,GAAG;MAAAD,QAAA,EACNlB,KAAK,CAACK,OAAO,CAACK,GAAG,CAAC,CAACH,QAAQ,EAAEM,SAAS,kBACnCf,OAAA,CAACL,IAAI;QAED2B,IAAI;QACJC,SAAS,EAAC,MAAM;QAChBC,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAQ,CAAE;QAAAL,QAAA,gBAE1BpB,OAAA,CAACJ,SAAS;UAAC8B,GAAG,EAAC,IAAI;UAAAN,QAAA,EAAEX,QAAQ,CAACkB;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,EAC/CtB,QAAQ,CAACE,UAAU,CAACC,GAAG,CAAC,CAACoB,SAAS,EAAEhB,WAAW,kBAC5ChB,OAAA,CAACN,MAAM;UAEHmB,KAAK,EAAET,OAAO,CAACW,SAAS,CAAC,CAACC,WAAW,CAAE,CAAC;UAAA;UACxCiB,OAAO;UACPC,OAAO,EAAEA,CAAA,KAAMpB,WAAW,CAACC,SAAS,EAAEC,WAAW,EAAEgB,SAAS,CAACf,KAAK,CAAE;UAAAG,QAAA,EAEnEY,SAAS,CAACA;QAAS,GALfhB,WAAW;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMZ,CACX,CAAC;MAAA,GAfGhB,SAAS;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAgBZ,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAAC5B,EAAA,CAhDuBF,QAAQ;AAAAkC,EAAA,GAARlC,QAAQ;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}