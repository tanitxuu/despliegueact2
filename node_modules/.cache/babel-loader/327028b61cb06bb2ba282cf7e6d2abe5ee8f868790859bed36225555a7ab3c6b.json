{"ast":null,"code":"var _jsxFileName = \"/home/tania/react/Clase/formulariopiel/src/componentes/preguntas.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Card, CardTitle, Col, Row } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pregunta(props) {\n  _s();\n  // Usar un array de estados para controlar el color de cada bot贸n\n  const [colores, setColores] = React.useState(props.preguns.map(() => props.color[0]));\n  const handleClick = (index, valor) => {\n    // Crear una copia del array de colores\n    const newColores = [...colores];\n    // Cambiar el color del bot贸n presionado\n    newColores[index] = props.color[1];\n    // Actualizar el estado de los colores\n    setColores(newColores);\n    props.contar(valor);\n  };\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      sm: \"6\",\n      children: props.preguns.map((pregunta, index) => /*#__PURE__*/_jsxDEV(Card, {\n        body: true,\n        className: \"my-2\",\n        style: {\n          width: '30rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          tag: \"h5\",\n          children: pregunta.texto\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }, this), pregunta.respuestas.map((respuesta, idx) => /*#__PURE__*/_jsxDEV(Button, {\n          color: colores[index] // Usar el color correspondiente desde el estado\n          ,\n          outline: true,\n          onClick: () => handleClick(index, respuesta.valor),\n          children: respuesta.respuesta\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 29\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n_s(Pregunta, \"iV7VrqWBF0a2bVw2IJdnMrGP3XE=\");\n_c = Pregunta;\nvar _c;\n$RefreshReg$(_c, \"Pregunta\");","map":{"version":3,"names":["React","Button","Card","CardTitle","Col","Row","jsxDEV","_jsxDEV","Pregunta","props","_s","colores","setColores","useState","preguns","map","color","handleClick","index","valor","newColores","contar","children","sm","pregunta","body","className","style","width","tag","texto","fileName","_jsxFileName","lineNumber","columnNumber","respuestas","respuesta","idx","outline","onClick","_c","$RefreshReg$"],"sources":["/home/tania/react/Clase/formulariopiel/src/componentes/preguntas.js"],"sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Card, CardTitle, Col, Row } from 'reactstrap';\n\nexport default function Pregunta(props) {\n    // Usar un array de estados para controlar el color de cada bot贸n\n    const [colores, setColores] = React.useState(props.preguns.map(() => props.color[0]));\n\n    const handleClick = (index, valor) => {\n        // Crear una copia del array de colores\n        const newColores = [...colores];\n        // Cambiar el color del bot贸n presionado\n        newColores[index] = props.color[1];\n        // Actualizar el estado de los colores\n        setColores(newColores);\n        props.contar(valor);\n    };\n\n    return (\n        <Row>\n            <Col sm=\"6\">\n                {props.preguns.map((pregunta, index) => (\n                    <Card\n                        key={index}\n                        body\n                        className=\"my-2\"\n                        style={{ width: '30rem' }}\n                    >\n                        <CardTitle tag=\"h5\">{pregunta.texto}</CardTitle>\n                        {pregunta.respuestas.map((respuesta, idx) => (\n                            <Button\n                                key={idx}\n                                color={colores[index]} // Usar el color correspondiente desde el estado\n                                outline\n                                onClick={() => handleClick(index, respuesta.valor)}\n                            >\n                                {respuesta.respuesta}\n                            </Button>\n                        ))}\n                    </Card>\n                ))}\n            </Col>\n        </Row>\n    );\n}\n\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,sCAAsC;AAC7C,SAASC,MAAM,EAAEC,IAAI,EAAEC,SAAS,EAAEC,GAAG,EAAEC,GAAG,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,eAAe,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACpC;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,KAAK,CAACa,QAAQ,CAACJ,KAAK,CAACK,OAAO,CAACC,GAAG,CAAC,MAAMN,KAAK,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EAErF,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IAClC;IACA,MAAMC,UAAU,GAAG,CAAC,GAAGT,OAAO,CAAC;IAC/B;IACAS,UAAU,CAACF,KAAK,CAAC,GAAGT,KAAK,CAACO,KAAK,CAAC,CAAC,CAAC;IAClC;IACAJ,UAAU,CAACQ,UAAU,CAAC;IACtBX,KAAK,CAACY,MAAM,CAACF,KAAK,CAAC;EACvB,CAAC;EAED,oBACIZ,OAAA,CAACF,GAAG;IAAAiB,QAAA,eACAf,OAAA,CAACH,GAAG;MAACmB,EAAE,EAAC,GAAG;MAAAD,QAAA,EACNb,KAAK,CAACK,OAAO,CAACC,GAAG,CAAC,CAACS,QAAQ,EAAEN,KAAK,kBAC/BX,OAAA,CAACL,IAAI;QAEDuB,IAAI;QACJC,SAAS,EAAC,MAAM;QAChBC,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAQ,CAAE;QAAAN,QAAA,gBAE1Bf,OAAA,CAACJ,SAAS;UAAC0B,GAAG,EAAC,IAAI;UAAAP,QAAA,EAAEE,QAAQ,CAACM;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,EAC/CV,QAAQ,CAACW,UAAU,CAACpB,GAAG,CAAC,CAACqB,SAAS,EAAEC,GAAG,kBACpC9B,OAAA,CAACN,MAAM;UAEHe,KAAK,EAAEL,OAAO,CAACO,KAAK,CAAE,CAAC;UAAA;UACvBoB,OAAO;UACPC,OAAO,EAAEA,CAAA,KAAMtB,WAAW,CAACC,KAAK,EAAEkB,SAAS,CAACjB,KAAK,CAAE;UAAAG,QAAA,EAElDc,SAAS,CAACA;QAAS,GALfC,GAAG;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMJ,CACX,CAAC;MAAA,GAfGhB,KAAK;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAgBR,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACxB,EAAA,CAxCuBF,QAAQ;AAAAgC,EAAA,GAARhC,QAAQ;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}