{"ast":null,"code":"var _jsxFileName = \"/home/tania/react/Clase/formulariopiel/src/componentes/preguntas.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Card, CardTitle, Col, Row } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pregunta(props) {\n  _s();\n  const [colores, setColores] = useState(() => {\n    const colorInicial = {};\n    props.preguns.map((pregunta, index) => {\n      colorInicial[index] = pregunta.respuestas.map(() => props.color[0]);\n    });\n    return colorInicial;\n  });\n  const [botonSeleccionadoPorTarjeta, setBotonSeleccionadoPorTarjeta] = useState(Array(props.preguns.length).fill(null));\n  const handleClick = (i, bi, valor) => {\n    // Verificar si el botón seleccionado ya está marcado\n    if (botonSeleccionadoPorTarjeta[i] === bi) {\n      return; // No hacer nada si el botón ya está marcado\n    }\n\n    // Crear una copia del estado de colores y del botón seleccionado por tarjeta\n    const nuevosColores = {\n      ...colores\n    };\n    const nuevoBotonSeleccionadoPorTarjeta = [...botonSeleccionadoPorTarjeta];\n\n    // Desmarcar todos los botones en la tarjeta\n    nuevosColores[i] = nuevosColores[i].map((color, index) => {\n      return index === bi ? props.color[1] : props.color[0];\n    });\n\n    // Actualizar el estado de los colores\n    setColores(nuevosColores);\n\n    // Guardar el índice del último botón seleccionado en esta tarjeta\n    nuevoBotonSeleccionadoPorTarjeta[i] = bi;\n    setBotonSeleccionadoPorTarjeta(nuevoBotonSeleccionadoPorTarjeta);\n\n    // Sumar el valor del botón al contador\n    props.contar(valor);\n  };\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      sm: \"6\",\n      children: props.preguns.map((pregunta, i) => /*#__PURE__*/_jsxDEV(Card, {\n        body: true,\n        className: \"my-2\",\n        style: {\n          width: '30rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          tag: \"h5\",\n          children: pregunta.texto\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this), pregunta.respuestas.map((respuesta, bi) => /*#__PURE__*/_jsxDEV(Button, {\n          color: colores[i][bi] // Usar el color correspondiente desde el estado\n          ,\n          outline: true,\n          onClick: () => handleClick(i, bi, respuesta.valor),\n          children: respuesta.respuesta\n        }, bi, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 29\n        }, this))]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_s(Pregunta, \"mb9omptVJv+sZp9iS4EDZRm7s3w=\");\n_c = Pregunta;\nvar _c;\n$RefreshReg$(_c, \"Pregunta\");","map":{"version":3,"names":["React","useState","Button","Card","CardTitle","Col","Row","jsxDEV","_jsxDEV","Pregunta","props","_s","colores","setColores","colorInicial","preguns","map","pregunta","index","respuestas","color","botonSeleccionadoPorTarjeta","setBotonSeleccionadoPorTarjeta","Array","length","fill","handleClick","i","bi","valor","nuevosColores","nuevoBotonSeleccionadoPorTarjeta","contar","children","sm","body","className","style","width","tag","texto","fileName","_jsxFileName","lineNumber","columnNumber","respuesta","outline","onClick","_c","$RefreshReg$"],"sources":["/home/tania/react/Clase/formulariopiel/src/componentes/preguntas.js"],"sourcesContent":["import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Card, CardTitle, Col, Row } from 'reactstrap';\n\n\nexport default function Pregunta(props) {\n  \n    const [colores, setColores] = useState(() => {\n        const colorInicial = {};\n        props.preguns.map((pregunta, index) => {\n            colorInicial[index] = pregunta.respuestas.map(() => props.color[0]);\n        });\n        return colorInicial;\n    });\n\n    const [botonSeleccionadoPorTarjeta, setBotonSeleccionadoPorTarjeta] = useState(Array(props.preguns.length).fill(null));\n\n    const handleClick = (i, bi, valor) => {\n        // Verificar si el botón seleccionado ya está marcado\n        if (botonSeleccionadoPorTarjeta[i] === bi) {\n            return; // No hacer nada si el botón ya está marcado\n        }\n\n        // Crear una copia del estado de colores y del botón seleccionado por tarjeta\n        const nuevosColores = { ...colores };\n        const nuevoBotonSeleccionadoPorTarjeta = [...botonSeleccionadoPorTarjeta];\n\n        // Desmarcar todos los botones en la tarjeta\n        nuevosColores[i] = nuevosColores[i].map((color, index) => {\n            return index === bi ? props.color[1] : props.color[0];\n        });\n\n        // Actualizar el estado de los colores\n        setColores(nuevosColores);\n\n        // Guardar el índice del último botón seleccionado en esta tarjeta\n        nuevoBotonSeleccionadoPorTarjeta[i] = bi;\n        setBotonSeleccionadoPorTarjeta(nuevoBotonSeleccionadoPorTarjeta);\n\n        // Sumar el valor del botón al contador\n        props.contar(valor);\n    };\n\n    return (\n        <Row>\n            <Col sm=\"6\">\n                {props.preguns.map((pregunta, i) => (\n                    <Card\n                        key={i}\n                        body\n                        className=\"my-2\"\n                        style={{ width: '30rem' }}\n                    >\n                        <CardTitle tag=\"h5\">{pregunta.texto}</CardTitle>\n                        {pregunta.respuestas.map((respuesta, bi) => (\n                            <Button\n                                key={bi}\n                                color={colores[i][bi]} // Usar el color correspondiente desde el estado\n                                outline\n                                onClick={() => handleClick(i, bi, respuesta.valor)}\n                            >\n                                {respuesta.respuesta}\n                            </Button>\n                        ))}\n                    </Card>\n                ))}\n            </Col>\n        </Row>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}