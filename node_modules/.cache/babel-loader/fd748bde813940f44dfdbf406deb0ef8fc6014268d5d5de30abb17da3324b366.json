{"ast":null,"code":"var _jsxFileName = \"/home/tania/react/Clase/formulariopiel/src/componentes/preguntas.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Card, CardTitle, Col, Row } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pregunta(props) {\n  _s();\n  // Estado para mantener el índice del botón presionado\n  const [botonPresionado, setBotonPresionado] = React.useState(null);\n\n  // Función para manejar el clic en un botón\n  const handleClick = (index, valor) => {\n    // Actualizar el estado del botón presionado\n    setBotonPresionado(index);\n    // Llamar a la función contar pasando el valor\n    props.contar(valor);\n  };\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      sm: \"6\",\n      children: props.preguns.map((pregunta, index) => /*#__PURE__*/_jsxDEV(Card, {\n        body: true,\n        className: \"my-2\",\n        style: {\n          width: '30rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          tag: \"h5\",\n          children: pregunta.texto\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }, this), pregunta.respuestas.map((respuesta, idx) => /*#__PURE__*/_jsxDEV(Button, {\n          color: botonPresionado === idx ? props.color[1] : props.color[0] // Cambiar el color del botón presionado\n          ,\n          outline: true\n          // Pasar el índice y el valor de la respuesta al manejar el clic\n          ,\n          onClick: () => handleClick(idx, respuesta.valor),\n          children: respuesta.respuesta\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 29\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n_s(Pregunta, \"yLUZweAb5TYX9B0POpKQ+idkLsM=\");\n_c = Pregunta;\nvar _c;\n$RefreshReg$(_c, \"Pregunta\");","map":{"version":3,"names":["React","Button","Card","CardTitle","Col","Row","jsxDEV","_jsxDEV","Pregunta","props","_s","botonPresionado","setBotonPresionado","useState","handleClick","index","valor","contar","children","sm","preguns","map","pregunta","body","className","style","width","tag","texto","fileName","_jsxFileName","lineNumber","columnNumber","respuestas","respuesta","idx","color","outline","onClick","_c","$RefreshReg$"],"sources":["/home/tania/react/Clase/formulariopiel/src/componentes/preguntas.js"],"sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Card, CardTitle, Col, Row } from 'reactstrap';\n\nexport default function Pregunta(props) {\n    // Estado para mantener el índice del botón presionado\n    const [botonPresionado, setBotonPresionado] = React.useState(null);\n\n    // Función para manejar el clic en un botón\n    const handleClick = (index, valor) => {\n        // Actualizar el estado del botón presionado\n        setBotonPresionado(index);\n        // Llamar a la función contar pasando el valor\n        props.contar(valor);\n    };\n\n    return (\n        <Row>\n            <Col sm=\"6\">\n                {/* Mapear las preguntas y renderizar cada una dentro de un card */}\n                {props.preguns.map((pregunta, index) => (\n                    <Card\n                        key={index}\n                        body\n                        className=\"my-2\"\n                        style={{ width: '30rem' }}\n                    >\n                        {/* Mostrar el título de la pregunta */}\n                        <CardTitle tag=\"h5\">{pregunta.texto}</CardTitle>\n                        {/* Mapear las respuestas y renderizar cada una dentro de un botón */}\n                        {pregunta.respuestas.map((respuesta, idx) => (\n                            <Button\n                                key={idx}\n                                color={botonPresionado === idx ? props.color[1] : props.color[0]} // Cambiar el color del botón presionado\n                                outline\n                                // Pasar el índice y el valor de la respuesta al manejar el clic\n                                onClick={() => handleClick(idx, respuesta.valor)}\n                            >\n                                {respuesta.respuesta}\n                            </Button>\n                        ))}\n                    </Card>\n                ))}\n            </Col>\n        </Row>\n    );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,sCAAsC;AAC7C,SAASC,MAAM,EAAEC,IAAI,EAAEC,SAAS,EAAEC,GAAG,EAAEC,GAAG,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,eAAe,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACpC;EACA,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,KAAK,CAACa,QAAQ,CAAC,IAAI,CAAC;;EAElE;EACA,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IAClC;IACAJ,kBAAkB,CAACG,KAAK,CAAC;IACzB;IACAN,KAAK,CAACQ,MAAM,CAACD,KAAK,CAAC;EACvB,CAAC;EAED,oBACIT,OAAA,CAACF,GAAG;IAAAa,QAAA,eACAX,OAAA,CAACH,GAAG;MAACe,EAAE,EAAC,GAAG;MAAAD,QAAA,EAENT,KAAK,CAACW,OAAO,CAACC,GAAG,CAAC,CAACC,QAAQ,EAAEP,KAAK,kBAC/BR,OAAA,CAACL,IAAI;QAEDqB,IAAI;QACJC,SAAS,EAAC,MAAM;QAChBC,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAQ,CAAE;QAAAR,QAAA,gBAG1BX,OAAA,CAACJ,SAAS;UAACwB,GAAG,EAAC,IAAI;UAAAT,QAAA,EAAEI,QAAQ,CAACM;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,EAE/CV,QAAQ,CAACW,UAAU,CAACZ,GAAG,CAAC,CAACa,SAAS,EAAEC,GAAG,kBACpC5B,OAAA,CAACN,MAAM;UAEHmC,KAAK,EAAEzB,eAAe,KAAKwB,GAAG,GAAG1B,KAAK,CAAC2B,KAAK,CAAC,CAAC,CAAC,GAAG3B,KAAK,CAAC2B,KAAK,CAAC,CAAC,CAAE,CAAC;UAAA;UAClEC,OAAO;UACP;UAAA;UACAC,OAAO,EAAEA,CAAA,KAAMxB,WAAW,CAACqB,GAAG,EAAED,SAAS,CAAClB,KAAK,CAAE;UAAAE,QAAA,EAEhDgB,SAAS,CAACA;QAAS,GANfC,GAAG;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOJ,CACX,CAAC;MAAA,GAlBGjB,KAAK;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAmBR,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACtB,EAAA,CA1CuBF,QAAQ;AAAA+B,EAAA,GAAR/B,QAAQ;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}