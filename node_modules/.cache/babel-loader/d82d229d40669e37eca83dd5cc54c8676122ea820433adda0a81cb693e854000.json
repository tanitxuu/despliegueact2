{"ast":null,"code":"var _jsxFileName = \"/home/tania/react/Clase/formulariopiel/src/componentes/preguntas.js\",\n  _s = $RefreshSig$();\n// preguntas.js\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Card, CardTitle, Col, Row, ButtonGroup } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pregunta(props) {\n  _s();\n  const [selectedButtons, setSelectedButtons] = useState({}); // Estado para almacenar los botones seleccionados por tarjeta\n\n  const handleButtonClick = (i, orden, valor) => {\n    setSelectedButtons(prevState => ({\n      ...prevState,\n      [orden]: i // Almacenar el índice del botón seleccionado para esta tarjeta\n    }));\n    props.contar(valor, orden); // Llama a la función contar con el valor del botón seleccionado\n  };\n\n  // Función para obtener el índice del botón seleccionado para una tarjeta específica\n  const getSelectedButtonIndex = orden => {\n    return selectedButtons[orden];\n  };\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      sm: \"6\",\n      children: props.preguns.map(pregunta => /*#__PURE__*/_jsxDEV(Card, {\n        body: true,\n        className: \"my-2\",\n        style: {\n          width: '30rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          tag: \"h5\",\n          children: pregunta.texto\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n          children: pregunta.respuestas.map((respuesta, i) => /*#__PURE__*/_jsxDEV(Button, {\n            color: props.color[0],\n            outline: true,\n            onClick: () => handleButtonClick(i, pregunta.orden, respuesta.valor),\n            active: i === getSelectedButtonIndex(pregunta.orden) // Comprueba si este botón está seleccionado para esta tarjeta\n            ,\n            children: respuesta.respuesta\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 25\n        }, this)]\n      }, pregunta.orden, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n_s(Pregunta, \"Zgc518aPYd2m4O83eHq9j6ZmEUc=\");\n_c = Pregunta;\nvar _c;\n$RefreshReg$(_c, \"Pregunta\");","map":{"version":3,"names":["React","useState","Button","Card","CardTitle","Col","Row","ButtonGroup","jsxDEV","_jsxDEV","Pregunta","props","_s","selectedButtons","setSelectedButtons","handleButtonClick","i","orden","valor","prevState","contar","getSelectedButtonIndex","children","sm","preguns","map","pregunta","body","className","style","width","tag","texto","fileName","_jsxFileName","lineNumber","columnNumber","respuestas","respuesta","color","outline","onClick","active","_c","$RefreshReg$"],"sources":["/home/tania/react/Clase/formulariopiel/src/componentes/preguntas.js"],"sourcesContent":["// preguntas.js\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Card, CardTitle, Col, Row, ButtonGroup } from 'reactstrap';\n\nexport default function Pregunta(props) {\n    const [selectedButtons, setSelectedButtons] = useState({}); // Estado para almacenar los botones seleccionados por tarjeta\n\n    const handleButtonClick = (i, orden, valor) => {\n        setSelectedButtons(prevState => ({\n            ...prevState,\n            [orden]: i, // Almacenar el índice del botón seleccionado para esta tarjeta\n        }));\n        props.contar(valor, orden); // Llama a la función contar con el valor del botón seleccionado\n    };\n\n    // Función para obtener el índice del botón seleccionado para una tarjeta específica\n    const getSelectedButtonIndex = (orden) => {\n        return selectedButtons[orden];\n    };\n\n    return (\n        <Row>\n            <Col sm=\"6\">\n                {props.preguns.map(pregunta => (\n                    <Card\n                        key={pregunta.orden}\n                        body\n                        className=\"my-2\"\n                        style={{ width: '30rem' }}\n                    >\n                        <CardTitle tag=\"h5\">{pregunta.texto}</CardTitle>\n                        <ButtonGroup>\n                            {pregunta.respuestas.map((respuesta, i) => (\n                                <Button\n                                    key={i}\n                                    color={props.color[0]}\n                                    outline\n                                    onClick={() => handleButtonClick(i, pregunta.orden, respuesta.valor)}\n                                    active={i === getSelectedButtonIndex(pregunta.orden)} // Comprueba si este botón está seleccionado para esta tarjeta\n                                >\n                                    {respuesta.respuesta}\n                                </Button>\n                            ))}\n                        </ButtonGroup>\n                    </Card>\n                ))}\n            </Col>\n        </Row>\n    );\n}\n\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,sCAAsC;AAC7C,SAASC,MAAM,EAAEC,IAAI,EAAEC,SAAS,EAAEC,GAAG,EAAEC,GAAG,EAAEC,WAAW,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5E,eAAe,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACpC,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE5D,MAAMc,iBAAiB,GAAGA,CAACC,CAAC,EAAEC,KAAK,EAAEC,KAAK,KAAK;IAC3CJ,kBAAkB,CAACK,SAAS,KAAK;MAC7B,GAAGA,SAAS;MACZ,CAACF,KAAK,GAAGD,CAAC,CAAE;IAChB,CAAC,CAAC,CAAC;IACHL,KAAK,CAACS,MAAM,CAACF,KAAK,EAAED,KAAK,CAAC,CAAC,CAAC;EAChC,CAAC;;EAED;EACA,MAAMI,sBAAsB,GAAIJ,KAAK,IAAK;IACtC,OAAOJ,eAAe,CAACI,KAAK,CAAC;EACjC,CAAC;EAED,oBACIR,OAAA,CAACH,GAAG;IAAAgB,QAAA,eACAb,OAAA,CAACJ,GAAG;MAACkB,EAAE,EAAC,GAAG;MAAAD,QAAA,EACNX,KAAK,CAACa,OAAO,CAACC,GAAG,CAACC,QAAQ,iBACvBjB,OAAA,CAACN,IAAI;QAEDwB,IAAI;QACJC,SAAS,EAAC,MAAM;QAChBC,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAQ,CAAE;QAAAR,QAAA,gBAE1Bb,OAAA,CAACL,SAAS;UAAC2B,GAAG,EAAC,IAAI;UAAAT,QAAA,EAAEI,QAAQ,CAACM;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eAChD3B,OAAA,CAACF,WAAW;UAAAe,QAAA,EACPI,QAAQ,CAACW,UAAU,CAACZ,GAAG,CAAC,CAACa,SAAS,EAAEtB,CAAC,kBAClCP,OAAA,CAACP,MAAM;YAEHqC,KAAK,EAAE5B,KAAK,CAAC4B,KAAK,CAAC,CAAC,CAAE;YACtBC,OAAO;YACPC,OAAO,EAAEA,CAAA,KAAM1B,iBAAiB,CAACC,CAAC,EAAEU,QAAQ,CAACT,KAAK,EAAEqB,SAAS,CAACpB,KAAK,CAAE;YACrEwB,MAAM,EAAE1B,CAAC,KAAKK,sBAAsB,CAACK,QAAQ,CAACT,KAAK,CAAE,CAAC;YAAA;YAAAK,QAAA,EAErDgB,SAAS,CAACA;UAAS,GANftB,CAAC;YAAAiB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAOF,CACX;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACO,CAAC;MAAA,GAlBTV,QAAQ,CAACT,KAAK;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAmBjB,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACxB,EAAA,CA7CuBF,QAAQ;AAAAiC,EAAA,GAARjC,QAAQ;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}