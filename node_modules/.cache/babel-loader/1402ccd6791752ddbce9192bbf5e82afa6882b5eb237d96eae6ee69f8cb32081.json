{"ast":null,"code":"var _jsxFileName = \"/home/tania/react/Clase/formulariopiel/src/componentes/preguntas.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Card, CardTitle, Col, Row } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pregunta(props) {\n  _s();\n  // Estado para almacenar los colores de los botones\n  const [colores, setColores] = useState(props.preguns.map(() => props.color1));\n\n  // Función para manejar el clic en un botón\n  const handleClick = (index, valor) => {\n    // Crear una nueva matriz de colores con el color del botón presionado actualizado\n    const newColores = [...colores];\n    newColores[index] = 'success';\n    // Actualizar el estado de los colores\n    setColores(newColores);\n    // Llamar a la función contar pasando el valor\n    props.contar(valor);\n  };\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      sm: \"6\",\n      children: props.preguns.map((pregunta, index) => /*#__PURE__*/_jsxDEV(Card, {\n        body: true,\n        className: \"my-2\",\n        style: {\n          width: '30rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          tag: \"h5\",\n          children: pregunta.texto\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 25\n        }, this), pregunta.respuestas.map((respuesta, idx) => /*#__PURE__*/_jsxDEV(Button, {\n          color: colores[index] // Usar el color correspondiente desde el estado\n          ,\n          outline: true\n          // Pasar el índice y el valor de la respuesta al manejar el clic\n          ,\n          onClick: () => handleClick(index, respuesta.valor),\n          children: respuesta.respuesta\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 29\n        }, this))]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n_s(Pregunta, \"B2CzWR9We+2q8VC6cUiS3kUVFKY=\");\n_c = Pregunta;\nvar _c;\n$RefreshReg$(_c, \"Pregunta\");","map":{"version":3,"names":["React","useState","Button","Card","CardTitle","Col","Row","jsxDEV","_jsxDEV","Pregunta","props","_s","colores","setColores","preguns","map","color1","handleClick","index","valor","newColores","contar","children","sm","pregunta","body","className","style","width","tag","texto","fileName","_jsxFileName","lineNumber","columnNumber","respuestas","respuesta","idx","color","outline","onClick","_c","$RefreshReg$"],"sources":["/home/tania/react/Clase/formulariopiel/src/componentes/preguntas.js"],"sourcesContent":["import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Card, CardTitle, Col, Row } from 'reactstrap';\n\nexport default function Pregunta(props) {\n    // Estado para almacenar los colores de los botones\n    const [colores, setColores] = useState(props.preguns.map(() => props.color1));\n\n    // Función para manejar el clic en un botón\n    const handleClick = (index, valor) => {\n        // Crear una nueva matriz de colores con el color del botón presionado actualizado\n        const newColores = [...colores];\n        newColores[index] = 'success';\n        // Actualizar el estado de los colores\n        setColores(newColores);\n        // Llamar a la función contar pasando el valor\n        props.contar(valor);\n    };\n\n    return (\n        <Row>\n            <Col sm=\"6\">\n                {/* Mapear las preguntas y renderizar cada una dentro de un card */}\n                {props.preguns.map((pregunta, index) => (\n                    <Card\n                        key={index}\n                        body\n                        className=\"my-2\"\n                        style={{ width: '30rem' }}\n                    >\n                        {/* Mostrar el título de la pregunta */}\n                        <CardTitle tag=\"h5\">{pregunta.texto}</CardTitle>\n                        {/* Mapear las respuestas y renderizar cada una dentro de un botón */}\n                        {pregunta.respuestas.map((respuesta, idx) => (\n                            <Button\n                                key={idx}\n                                color={colores[index]} // Usar el color correspondiente desde el estado\n                                outline\n                                // Pasar el índice y el valor de la respuesta al manejar el clic\n                                onClick={() => handleClick(index, respuesta.valor)}\n                            >\n                                {respuesta.respuesta}\n                            </Button>\n                        ))}\n                    </Card>\n                ))}\n            </Col>\n        </Row>\n    );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,sCAAsC;AAC7C,SAASC,MAAM,EAAEC,IAAI,EAAEC,SAAS,EAAEC,GAAG,EAAEC,GAAG,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,eAAe,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACpC;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAACS,KAAK,CAACI,OAAO,CAACC,GAAG,CAAC,MAAML,KAAK,CAACM,MAAM,CAAC,CAAC;;EAE7E;EACA,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IAClC;IACA,MAAMC,UAAU,GAAG,CAAC,GAAGR,OAAO,CAAC;IAC/BQ,UAAU,CAACF,KAAK,CAAC,GAAG,SAAS;IAC7B;IACAL,UAAU,CAACO,UAAU,CAAC;IACtB;IACAV,KAAK,CAACW,MAAM,CAACF,KAAK,CAAC;EACvB,CAAC;EAED,oBACIX,OAAA,CAACF,GAAG;IAAAgB,QAAA,eACAd,OAAA,CAACH,GAAG;MAACkB,EAAE,EAAC,GAAG;MAAAD,QAAA,EAENZ,KAAK,CAACI,OAAO,CAACC,GAAG,CAAC,CAACS,QAAQ,EAAEN,KAAK,kBAC/BV,OAAA,CAACL,IAAI;QAEDsB,IAAI;QACJC,SAAS,EAAC,MAAM;QAChBC,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAQ,CAAE;QAAAN,QAAA,gBAG1Bd,OAAA,CAACJ,SAAS;UAACyB,GAAG,EAAC,IAAI;UAAAP,QAAA,EAAEE,QAAQ,CAACM;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,EAE/CV,QAAQ,CAACW,UAAU,CAACpB,GAAG,CAAC,CAACqB,SAAS,EAAEC,GAAG,kBACpC7B,OAAA,CAACN,MAAM;UAEHoC,KAAK,EAAE1B,OAAO,CAACM,KAAK,CAAE,CAAC;UAAA;UACvBqB,OAAO;UACP;UAAA;UACAC,OAAO,EAAEA,CAAA,KAAMvB,WAAW,CAACC,KAAK,EAAEkB,SAAS,CAACjB,KAAK,CAAE;UAAAG,QAAA,EAElDc,SAAS,CAACA;QAAS,GANfC,GAAG;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOJ,CACX,CAAC;MAAA,GAlBGhB,KAAK;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAmBR,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACvB,EAAA,CA7CuBF,QAAQ;AAAAgC,EAAA,GAARhC,QAAQ;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}